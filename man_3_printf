# _PRINTF(3) - Manuel des fonctions de bibliothèque

## NOM
_printf - Implémentation personnalisée de la fonction printf

## SYNOPSIS
```c
#include "main.h"

int _printf(const char *format, ...);
```
### **Spécificateurs de format**
La chaîne `format` détermine comment les arguments suivants sont interprétés et affichés. Les spécificateurs pris en charge sont :

- **`%c`** : Affiche un caractère unique.
- **`%s`** : Affiche une chaîne de caractères.
- **`%d` / `%i`** : Affiche un entier signé en notation décimale.
- **`%%`** : Affiche un pourcentage (`%`) littéral.

La fonction parcourt chaque caractère de la chaîne `format` :
- **Les caractères normaux** sont imprimés tels quels.
- **Lorsqu'un `%` est rencontré**, `_printf` cherche un spécificateur valide et applique le traitement correspondant.
- **Si un spécificateur inconnu est trouvé**, `_printf` affiche `%` sans conversion.

## VALEUR DE RETOUR
Retourne le nombre total de caractères affichés (hors caractère null).  
En cas d’échec, la fonction **termine le programme avec un état `-1`**.

## EXEMPLES
```c
_printf("Bonjour, %s !\n", "monde");
// Affiche : Bonjour, monde !

_printf("Nombre : %d\n", 42);
// Affiche : Nombre : 42

_printf("Caractère : %c\n", 'A');
// Affiche : Caractère : A

_printf("Signe pourcentage : %%\n");
// Affiche : Signe pourcentage : %
```

## REMARQUES
- **Cette implémentation ne prend pas en charge tous les spécificateurs de `printf`** (ex. les nombres flottants).
- **Si `format` est `NULL`**, la fonction provoque un **arrêt immédiat** du programme avec un état `-1`.
- **Gestion des erreurs limitée** : `_printf` ne gère pas les largeurs de champ ni les tampons (`buffering`).

## VOIR AUSSI
`printf(3)`, `putchar(3)`, `write(2)`

## AUTEUR
Baptiste Rousseau

